{{define "index"}}
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/htmx.org@2.0.2" integrity="sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ" crossorigin="anonymous"></script>
    <title>cider ⋅ ivp4</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
    <style>
:root {
  --background: #fefefe;
  --background-2: #fafafa;
  --foreground: #222;
  --secondary: #f0f0f0;
  --tertiary: #e0e0e0;
  --quaternary: #666;
  --danger: firebrick;
  --a: darkred;
  --b: darkgoldenrod;
  --c: darkmagenta;
  --d: darkblue;
  --e: darkgray;
}
html {background:var(--background);color:var(--foreground)}
body {margin:auto;max-width:700px;font-family:"Inter",sans-serif}
main {margin-top:9rem;}
a {text-decoration-style: dotted}
.results, .binary {margin:auto;text-align:center;}
footer {color:var(--quaternary);margin-inline:auto;margin-top:1.5rem;bottom:0;left:0;right:0;width:fit-content;text-align:center;}
footer a, footer a:visited {color:var(--quaternary)}
.form-group {display:inline;}
form {margin:0 auto;text-align:center;}
#cider form {font-family:"JetBrains Mono",monospace;}
#cider, #cider input {line-height: 3rem; font-size:2.5rem;font-weight:600;font-family:"JetBrains Mono",monospace;}
#cider input {width:5rem;text-align:center;height:3.5rem;vertical-align:middle;border:2px solid var(--secondary);border-radius:.5rem;background:var(--secondary);color: var(--foreground)}
#cider input[aria-invalid="true"] {border: 2px solid var(--danger)}
.number {font-family:"JetBrains Mono",monospace;font-size:1.25rem;border:1px solid var(--tertiary);padding:.1rem;background:var(--secondary)}
.number:nth-child(1) {border-radius:.3rem 0rem 0rem .3rem}
.number:nth-child(8) {border-radius:0rem .3rem .3rem 0rem}
.octet {display:inline-block;padding:.5rem;}
.value {margin:2rem 0;}
.value p {color:var(--quaternary)}
.value h2 {font-family:"JetBrains Mono",monospace;}
.results-container {border: 1px solid var(--secondary); border-radius:.5rem; background: var(--background-2); display: flex;flex-direction: row;max-width:500px;margin: auto;}
.spacer {padding: 4rem;}
@media only screen and (max-width: 600px) {
  #cider {font-size:2rem}
  #cider input {width:4rem;font-size:2rem;height:2.5rem}
  body {max-width: 100%}
  main {margin-top: 4.5rem}
  .binary {margin:0}
  .spacer {padding:2rem;}
  .octet {display: block;}
  .results-container {border: unset;background:unset}
}
@media only screen and (max-width: 300px) {
  .results-container {flex-direction: column;}
  .value {margin-bottom:0rem;}
}
@media (prefers-color-scheme: dark) {
    :root {
    --background: #202020;
    --background-2: #282828;
    --foreground: #fefefe;
    --secondary: #2e2e2e;
    --tertiary: #3e3e3e;
    --quaternary: #888;
    --a: tomato;
    --b: goldenrod;
    --c: mediumorchid;
    --d: skyblue;
    --e: gray;
    --danger: crimson;
  }
}
    </style>
</head>
<body>
  <footer>
    <small><strong>cider</strong> ⋅ tiny ipv4 visualization ⋅ <a href="https://github.com/mstcl/cider">src</a></small>
  </footer>
  <main
    hx-get="/"
    hx-include="form"
    hx-target="#results"
    hx-select="#results"
    hx-trigger="load once"
  >
    <section>
      <form id="cider"
        hx-get="/"
        hx-swap="outerHTML"
        hx-target="#results"
        hx-select="#results"
        hx-trigger="input changed delay:90ms from:input,keyup[keyCode==13]"
        hx-replace-url="false"
      ><div class="form-group"><input
            class="input"
            style="color:var(--a)"
            name="a"
            value="{{.Addr.A}}"
            required
            hx-validate="true"
            oninput='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:validate='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:failed='this.setAttribute("aria-invalid", "true");'
            hx-on:htmx:validation:halted='this.setAttribute("aria-invalid", "true");'
            type="text"
            pattern="^(25[0-5]|(2[0-4]|1\d|[1-9]|)\d)$"
            inputmode="numeric"
            maxlength="3"
          /></div><span>.</span><div class="form-group"><input
            class="input"
            style="color:var(--b)"
            name="b"
            value="{{.Addr.B}}"
            required
            hx-validate="true"
            oninput='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:validate='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:failed='this.setAttribute("aria-invalid", "true");'
            hx-on:htmx:validation:halted='this.setAttribute("aria-invalid", "true");'
            type="text"
            pattern="^(25[0-5]|(2[0-4]|1\d|[1-9]|)\d)$"
            inputmode="numeric"
            maxlength="3"
          /></div><span>.</span><div class="form-group"><input
            class="input"
            style="color:var(--c)"
            name="c"
            value="{{.Addr.C}}"
            required
            hx-validate="true"
            oninput='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:validate='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:failed='this.setAttribute("aria-invalid", "true");'
            hx-on:htmx:validation:halted='this.setAttribute("aria-invalid", "true");'
            type="text"
            pattern="^(25[0-5]|(2[0-4]|1\d|[1-9]|)\d)$"
            inputmode="numeric"
            maxlength="3"
          /></div><span>.</span><div class="form-group"><input
            class="input"
            style="color:var(--d)"
            name="d"
            value="{{.Addr.D}}"
            required
            hx-validate="true"
            oninput='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:validate='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:failed='this.setAttribute("aria-invalid", "true");'
            hx-on:htmx:validation:halted='this.setAttribute("aria-invalid", "true");'
            type="text"
            pattern="^(25[0-5]|(2[0-4]|1\d|[1-9]|)\d)$"
            inputmode="numeric"
            maxlength="3"
          /></div><span>/</span><div class="form-group"><input
            class="input"
            style="color:var(--e)"
            name="e"
            value="{{.Addr.E}}"
            required
            hx-validate="true"
            oninput='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:validate='this.setAttribute("aria-invalid", "false");'
            hx-on:htmx:validation:failed='this.setAttribute("aria-invalid", "true");'
            hx-on:htmx:validation:halted='this.setAttribute("aria-invalid", "true");'
            type="text"
            pattern="^(0|[12]\d|3[0-2])$"
            inputmode="numeric"
            maxlength="2"
          />
        </div>
      </form>
    </section>
    <div class="spacer"></div>
    <section id="results">
      <div class="results-container">
        <div class="results">
          <div class="value">
            <p>gateway</p>
            <h2>{{.Results.Gateway}}</h2>
          </div>
          <div class="value">
            <p>netmask</p></th>
            <h2>{{.Results.Netmask}}</h2>
          </div>
        </div>
        <div class="results">
          <div class="value">
            <p>broadcast</p>
            <h2>{{.Results.Broadcast}}</h2>
          </div>
          <div class="value">
            <p># addresses</p>
            <h2>{{.Results.Count}}</h2>
          </div>
        </div>
      </div>
      <div class="spacer"></div>
      <div class="binary">
      {{$m := .ZIMask}}
      {{- range $i, $v := .Binary -}}
        {{- if or (or (eq $i 0) (eq $i 8)) (or (eq $i 16) (eq $i 24)) -}}
        <div class="octet">
        {{- end -}}
        <span class="number"
          {{if gt $i $m}}
          style="color:var(--e)"
          {{else if lt $i 8}}
          style="color:var(--a)"
          {{else if (and (gt $i 7) (lt $i 16))}}
          style="color:var(--b)"
          {{else if (and (gt $i 15) (lt $i 24))}}
          style="color:var(--c)"
          {{else if (and (gt $i 23) (lt $i 32))}}
          style="color:var(--d)"
          {{end}}
        >{{- if gt $i $m}}0{{else}}{{$v}}{{end}}</span>
        {{- if or (or (eq $i 7) (eq $i 15)) (or (eq $i 23) (eq $i 31)) -}}
        </div>
        {{- end -}}
      {{end}}
      </div>
    </section>
  </main>
  <script>
    const form = document.querySelector('#cider')

    const handleInput = ({target: input}) => {
      if (input.parentNode.nextElementSibling) {
        if (input.parentNode.nextElementSibling.nextElementSibling) {
          if (input.parentNode.nextElementSibling.nextElementSibling.firstElementChild) {
            if (input.value.length == input.maxLength) {
              input.parentNode.nextElementSibling.nextElementSibling.firstElementChild.focus()
            }
          }
        }
      }
    }

    form.addEventListener('input', handleInput);

    const handleDelete = ({target: input, key}) => {
      if (input.parentNode.previousElementSibling) {
        if (input.parentNode.previousElementSibling.previousElementSibling) {
          if (input.parentNode.previousElementSibling.previousElementSibling.firstElementChild) {
            if (key === "Backspace" && input.value.length == 0) {
              const prev = input.parentNode.previousElementSibling.previousElementSibling.firstElementChild
              prev.focus()
              prev.setSelectionRange(prev.value.length, prev.value.length)
            }
          }
        }
      }
    }

    form.addEventListener('keydown', handleDelete);

    const inputs = form.querySelectorAll('.form-group input')

    const handlePaste = (e) => {
      const paste = e.clipboardData.getData('text')
      if (!/^([0-9]{1,3}\.){3}([0-9]{1,3}[/])([1-9]|[12][0-9]|3[012])$/.test(paste)) return event.preventDefault();


      const addr = paste.split("/");
      const values = addr[0].split(".")
      values.push(addr[1])

      inputs.forEach(
          (input, i) => input.value = values[i] || ''
      )
      inputs[inputs.length-1].focus()
    }

    inputs[0].addEventListener('paste', handlePaste);
  </script>
</body>
</html>
{{end}}
